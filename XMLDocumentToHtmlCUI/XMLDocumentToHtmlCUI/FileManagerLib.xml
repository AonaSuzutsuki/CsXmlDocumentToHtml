<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileManagerLib</name>
    </assembly>
    <members>
        <member name="T:FileManagerLib.Dat.DatFileManager">
            <summary>
            データファイルの管理を提供します。
            </summary>
        </member>
        <member name="P:FileManagerLib.Dat.DatFileManager.SplitSize">
            <summary>
            ファイルへの書き込みの際に分割読み込みをするしきい値
            </summary>
        </member>
        <member name="P:FileManagerLib.Dat.DatFileManager.IsShiftJsonPosition">
            <summary>
            既に書き込まれているJSONをスキップして書き込むか上書きするかどうかを設定または取得します。
            </summary>
        </member>
        <member name="P:FileManagerLib.Dat.DatFileManager.LastPositionWithoutJson">
            <summary>
            取り除くべき既に書き込まれているJSONのサイズを負数ベースで返します。
            </summary>
        </member>
        <member name="P:FileManagerLib.Dat.DatFileManager.IsCheckHash">
            <summary>
            ハッシュ計算によるデータの整合性を確認するかどうかを設定あるいは取得します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Dat.DatFileManager.GetBytes(System.Int64,System.Int32)">
            <summary>
            指定された位置からデータの長さを除いたデータをバイト配列で返します。
            </summary>
            <param name="start">データの開始位置を指定します。</param>
            <param name="identifierLength">データの長さを格納するバイトサイズを指定します。</param>
            <returns>実データのバイト配列</returns>
        </member>
        <member name="M:FileManagerLib.Dat.DatFileManager.GetBytesFromEnd(System.Int32)">
            <summary>
            末尾から実データの長さを除いたデータをバイト配列で返します。
            </summary>
            <param name="identifierLength">データの長さを格納するバイトサイズ</param>
            <returns>実データのバイト配列</returns>
        </member>
        <member name="M:FileManagerLib.Dat.DatFileManager.GetPartialBytes(System.Int64,System.Int64,System.Int32)">
            <summary>
            指定された位置からデータの長さを除いたデータの部分をバイト配列で返します。
            </summary>
            <param name="start">データの開始位置を指定します。</param>
            <param name="length">取得したいデータの長さを指定します。</param>
            <param name="identifierLength">データの長さを格納するバイトサイズを指定します。</param>
            <returns>実データの部分バイト配列</returns>
        </member>
        <member name="T:FileManagerLib.Extensions.Path.PathItemExtensions">
            <summary>
            PathItemの拡張メソッドを提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Extensions.Path.PathItemExtensions.GetFilenameAndParent(System.String)">
            <summary>
            文字列をファイル名と親ディレクトリに分解してタプルで返します。
            </summary>
            <param name="fullPath">対象のパス文字列</param>
            <returns>親ディレクトリのPathItemとファイル名文字列のタプル</returns>
        </member>
        <member name="T:FileManagerLib.Extensions.Collections.DictionaryExtension">
            <summary>
            Dictionary関連の拡張メソッドを提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Extensions.Collections.DictionaryExtension.ToArray``2(System.Collections.Generic.SortedDictionary{``0,``1}.ValueCollection)">
            <summary>
            SortedDictionaryのValue値を配列に変換します。
            </summary>
            <typeparam name="TKey">SortedDictionaryのキーの型</typeparam>
            <typeparam name="TValue">SortedDictionaryの値の型</typeparam>
            <param name="values">変換したいSortedDictionaryのValue</param>
            <returns>変換された配列</returns>
        </member>
        <member name="T:FileManagerLib.Extensions.Collections.ArrayExtension">
            <summary>
            配列関連の拡張メソッドを提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Extensions.Collections.ArrayExtension.ForEach``1(``0[],System.Action{``0})">
            <summary>
            配列の各要素に対して、指定されたデリゲートの処理を実行します。
            </summary>
            <typeparam name="T">配列の総称型</typeparam>
            <param name="array">対象の配列</param>
            <param name="action">実行するデリゲート</param>
        </member>
        <member name="T:FileManagerLib.File.ByteLoader">
            <summary>
            バイト関連の読み込み機能を提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.File.ByteLoader.FromStream(System.IO.Stream)">
            <summary>
            ストリームから全てのバイト配列を読み込みます。
            </summary>
            <param name="stream">読み込む対象のストリーム</param>
            <returns>読み込んだバイト配列</returns>
        </member>
        <member name="T:FileManagerLib.File.Exceptions.FileDirectoryExistedException">
            <summary>
            ファイルまたはディレクトリが存在する時に発生する例外です。
            </summary>
        </member>
        <member name="M:FileManagerLib.File.Exceptions.FileDirectoryExistedException.#ctor(System.String)">
            <summary>
            独自のメッセージを受けて例外を初期化します。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FileManagerLib.File.Json.JsonFileManager.ResolveAbsolutePath(System.String,System.String,System.String[])">
            <summary>
            Convert path on file system to internal path.
            </summary>
            <param name="basePath">dir path on file system</param>
            <param name="parent">internal parent directory path</param>
            <param name="dirPathArray">filepaths on file system</param>
            <returns></returns>
        </member>
        <member name="T:FileManagerLib.MimeType.MimeTypeMap">
            <summary>
            MimeTypeの変換系を提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.MimeType.MimeTypeMap.GetMimeTypeFromExtension(System.String)">
            <summary>
            拡張子からMimeTypeを判別します。
            </summary>
            <param name="extension">対象の拡張子</param>
            <returns>MimeType</returns>
        </member>
        <member name="M:FileManagerLib.MimeType.MimeTypeMap.GetMimeType(System.String)">
            <summary>
            ファイルパスからMimeTypeを判別します。
            </summary>
            <param name="filepath">対象のファイルパス</param>
            <returns>MimeType</returns>
        </member>
        <member name="M:FileManagerLib.MimeType.MimeTypeMap.IsImage(System.String)">
            <summary>
            MimeTypeが画像系かどうかを判定します。
            </summary>
            <param name="mimeType">MimeTypeの文字列</param>
            <returns>画像系かどうか</returns>
        </member>
        <member name="T:FileManagerLib.Path.PathSplitter">
            <summary>
            パスの分割系機能を提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Path.PathSplitter.SplitPath(System.String)">
            <summary>
            パス文字列を分割し、PathItemで返します。
            </summary>
            <param name="pathArg">対象のパス文字列</param>
            <returns>変換されたPathItem</returns>
        </member>
        <member name="T:FileManagerLib.Crypto.Sha256">
            <summary>
            Sha256を計算するクラスを提供します。
            </summary>
        </member>
        <member name="M:FileManagerLib.Crypto.Sha256.GetSha256(System.IO.Stream)">
            <summary>
            StreamからSHA256を計算します。
            </summary>
            <param name="stream">計算する対象のStream</param>
            <returns>変換されたSHA256の文字列</returns>
        </member>
        <member name="M:FileManagerLib.Crypto.Sha256.GetSha256(System.Byte[])">
            <summary>
            バイト配列からSHA256を計算します。
            </summary>
            <param name="bytes">計算する対象のバイト配列</param>
            <returns>変換されたSHA256の文字列</returns>
        </member>
    </members>
</doc>
